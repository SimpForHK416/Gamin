// ƒê·∫∑t trong th∆∞ m·ª•c: com.example.gamin/MemoryCard/MemoryGame.kt

package com.example.gamin.MemoryCard

import kotlin.random.Random

// 1. Tr·∫°ng th√°i c·ªßa m·ªôt th·∫ª b√†i
data class CardState(
    val id: Int, // ID duy nh·∫•t cho m·ªói v·ªã tr√≠
    val contentId: Int, // ID c·ªßa n·ªôi dung (gi√° tr·ªã th·∫ª, v√≠ d·ª•: 1, 2, 3...)
    val isFaceUp: Boolean = false,
    val isMatched: Boolean = false
)

// 2. Tr·∫°ng th√°i Game
data class MemoryGame(
    val rows: Int = 4,
    val cols: Int = 4,
    val cards: List<CardState> = initializeCards(rows, cols),
    val currentlyFlippedIndices: List<Int> = emptyList(), // Danh s√°ch 0, 1 ho·∫∑c 2 th·∫ª ƒëang l·∫≠t
    val status: String = "Playing",
    val moves: Int = 0
) {
    companion object {
        private fun initializeCards(rows: Int, cols: Int): List<CardState> {
            val totalPairs = (rows * cols) / 2
            val totalCards = rows * cols

            // T·∫°o c√°c c·∫∑p n·ªôi dung (v√≠ d·ª•: 1, 1, 2, 2, 3, 3,...)
            val contentList = (1..totalPairs).flatMap { listOf(it, it) }.shuffled(Random)

            // T·∫°o danh s√°ch CardState v·ªõi ID v√† Content ID
            return List(totalCards) { index ->
                CardState(
                    id = index,
                    contentId = contentList[index]
                )
            }
        }
    }

    // Ki·ªÉm tra ƒë√£ th·∫Øng ch∆∞a
    private val allMatched: Boolean
        get() = cards.all { it.isMatched }

    // 3. Logic l·∫≠t th·∫ª
    fun flipCard(index: Int): MemoryGame {
        // Ch·ªâ cho ph√©p l·∫≠t khi ƒëang "Playing"
        if (status != "Playing" || index < 0 || index >= cards.size) return this

        val cardToFlip = cards[index]

        // Kh√¥ng l·∫≠t th·∫ª ƒë√£ l·∫≠t ho·∫∑c ƒë√£ kh·ªõp
        if (cardToFlip.isFaceUp || cardToFlip.isMatched) return this

        // --- B·∫Øt ƒë·∫ßu qu√° tr√¨nh l·∫≠t ---

        // T·∫°o tr·∫°ng th√°i m·ªõi cho th·∫ª l·∫≠t
        val newCards = cards.toMutableList()
        newCards[index] = cardToFlip.copy(isFaceUp = true)

        val newFlipped = currentlyFlippedIndices + index

        // Tr∆∞·ªùng h·ª£p 1: Th·∫ª th·ª© nh·∫•t ƒë∆∞·ª£c l·∫≠t
        if (newFlipped.size == 1) {
            return copy(cards = newCards, currentlyFlippedIndices = newFlipped)
        }

        // Tr∆∞·ªùng h·ª£p 2: Th·∫ª th·ª© hai ƒë∆∞·ª£c l·∫≠t
        if (newFlipped.size == 2) {
            val firstCard = newCards[newFlipped[0]]
            val secondCard = newCards[newFlipped[1]]

            // Ki·ªÉm tra kh·ªõp
            val isMatch = firstCard.contentId == secondCard.contentId

            val nextMoves = moves + 1

            if (isMatch) {
                // ƒê√°nh d·∫•u kh·ªõp v√† reset danh s√°ch ƒëang l·∫≠t
                newCards[newFlipped[0]] = firstCard.copy(isMatched = true)
                newCards[newFlipped[1]] = secondCard.copy(isMatched = true)

                val game = copy(
                    cards = newCards,
                    currentlyFlippedIndices = emptyList(),
                    moves = nextMoves
                )

                // Ki·ªÉm tra th·∫Øng
                return if (game.allMatched) game.copy(status = "You Win! üéâ") else game
            } else {
                // Kh√¥ng kh·ªõp: ƒê·ªÉ th·∫ª l·∫≠t trong danh s√°ch currentlyFlippedIndices
                // Logic n√†y cho ph√©p ng∆∞·ªùi ch∆°i nh√¨n th·∫•y 2 th·∫ª l·∫≠t trong th·ªùi gian ng·∫Øn
                // tr∆∞·ªõc khi t·ª± ƒë·ªông l·∫≠t √∫p l·∫°i (s·∫Ω x·ª≠ l√Ω trong Composable)
                return copy(
                    cards = newCards,
                    currentlyFlippedIndices = newFlipped,
                    moves = nextMoves
                )
            }
        }

        return this // Kh√¥ng n√™n x·∫£y ra
    }

    // Logic l·∫≠t √∫p l·∫°i 2 th·∫ª KH√îNG kh·ªõp (ƒë∆∞·ª£c g·ªçi sau m·ªôt ƒë·ªô tr·ªÖ)
    fun hideMismatchedCards(): MemoryGame {
        if (currentlyFlippedIndices.size < 2) return this

        val firstCard = cards[currentlyFlippedIndices[0]]
        val secondCard = cards[currentlyFlippedIndices[1]]

        // L·∫≠t √∫p l·∫°i n·∫øu ch√∫ng ch∆∞a kh·ªõp (ch∆∞a c√≥ isMatched = true)
        if (!firstCard.isMatched && !secondCard.isMatched) {
            val newCards = cards.toMutableList()
            newCards[currentlyFlippedIndices[0]] = firstCard.copy(isFaceUp = false)
            newCards[currentlyFlippedIndices[1]] = secondCard.copy(isFaceUp = false)

            return copy(
                cards = newCards,
                currentlyFlippedIndices = emptyList() // Reset danh s√°ch
            )
        }
        return this // N·∫øu ƒë√£ kh·ªõp th√¨ kh√¥ng l√†m g√¨
    }
}